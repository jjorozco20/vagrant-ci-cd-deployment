pipeline {
    agent { label 'test-agent' }  // Use the label of your self-hosted agent

    environment {
        // Set environment variables for your paths
        WORKSPACE = "/path/to/the/vagrant-ci-cd-deployment/repo"  // Adjust the path if needed
        VAGRANT_PATH = "${WORKSPACE}/src"  // Here is stored the Vagrantfile
    }

    parameters {
        string(name: 'VM1_NAME', defaultValue: '', description: 'Name of VM1')
        string(name: 'VM1_IP', defaultValue: '', description: 'IP address of VM1')
        string(name: 'VM1_BOX', defaultValue: 'ubuntu/focal64', description: 'Vagrant box for VM1')
        string(name: 'VM2_NAME', defaultValue: '', description: 'Name of VM2')
        string(name: 'VM2_IP', defaultValue: '', description: 'IP address of VM2')
        string(name: 'VM2_BOX', defaultValue: 'centos/8', description: 'Vagrant box for VM2')
        string(name: 'ADAPTER_NAME', defaultValue: 'wlp0s20f3', description: 'Name of the network adapter (Generic)')
        string(name: 'VM1_MEMORY', defaultValue: '1024', description: 'Memory allocation for VM1 (MB)')
        string(name: 'VM1_CPUS', defaultValue: '1', description: 'Number of CPUs for VM1')
        string(name: 'VM2_MEMORY', defaultValue: '1024', description: 'Memory allocation for VM2 (MB)')
        string(name: 'VM2_CPUS', defaultValue: '1', description: 'Number of CPUs for VM2')
    }

    stages {
        stage('Vagrant Up') {
            steps {
                script {
                    // Verify that the Vagrantfile exists in the mounted directory
                    sh 'ls -l ${VAGRANT_PATH}'

                    // Run Vagrant using the environment variables for the Vagrantfile
                    sh "cd ${VAGRANT_PATH} && vagrant up"
                }
            }
        }

        stage('Run Chef Inspec on VM1') {
            steps {
                script {
                    sh '''
                    cd ${WORKSPACE}
                    inspec exec chef/controls.rb \
                    --host "$(vagrant ssh-config --host ${params.VM1_NAME} | grep HostName | awk '{print $2}')" \
                    --user vagrant \
                    --key-files "$(vagrant ssh-config --host ${params.VM1_NAME} | grep IdentityFile | awk '{print $2}')"
                    '''
                }
            }
        }

        stage('Run Chef Inspec on VM2') {
            steps {
                script {
                    sh '''
                    cd ${WORKSPACE}
                    inspec exec chef/controls.rb \
                    --host "$(vagrant ssh-config --host ${params.VM2_NAME} | grep HostName | awk '{print $2}')" \
                    --user vagrant \
                    --key-files "$(vagrant ssh-config --host ${params.VM2_NAME} | grep IdentityFile | awk '{print $2}')"
                    '''
                }
            }
        }

        stage('Manual Intervention') {
            steps {
                input message: 'Do you want to proceed with Vagrant destroy?', parameters: []
            }
        }

        stage('Vagrant destroy') {
            steps {
                script {
                    // Run Vagrant destroy using the environment variables for the Vagrantfile
                    sh "cd ${VAGRANT_PATH} && vagrant destroy -f"
                }
            }
        }
    }
}
